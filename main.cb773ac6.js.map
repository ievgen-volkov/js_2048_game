{"version":3,"sources":["scripts/main.js"],"names":["click","require","audio","Audio","ready","tableSize","numberElements","handleMove","bind","start","initSelectors","initListeners","tableField","document","querySelector","tbody","createElement","gameScore","messageLose","messageWin","messageStart","startButton","window","addEventListener","play","i","row","classList","add","append","j","cell","score","gameOver","hasWon","matrix","Array","fill","map","contains","remove","textContent","addNumber","render","Math","random","freeCells","getFreeCells","floor","length","reduce","rowIndex","forEach","val","colIndex","push","getRandomCell","y","x","getRandomNumber","emptyCells","filter","el","concat","slice","degree","_","reverse","Error","event","key","merge","matrixRotate","matrixRef","some","matrixShift","hasMatrixChanged","rows","className","arr","cellIndex","field","cells","setTimeout","canMove","initGame"],"mappings":"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","file":"main.cb773ac6.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst click = require('../@assets/audio/ui-click-97915.mp3');\nconst audio = new Audio(click);\n\ndocument.addEventListener('DOMContentLoaded', ready);\n\nfunction ready() {\n  class Game {\n    constructor(tableSize = 4) {\n      this.tableSize = tableSize;\n      this.numberElements = [];\n\n      this.handleMove = this.handleMove.bind(this);\n      this.start = this.start.bind(this);\n\n      this.initSelectors();\n      this.initListeners();\n    }\n\n    initSelectors() {\n      this.tableField = document.querySelector('table');\n      this.tbody = document.createElement('tbody');\n      this.gameScore = document.querySelector('.game-score');\n      this.messageLose = document.querySelector('.message-lose');\n      this.messageWin = document.querySelector('.message-win');\n      this.messageStart = document.querySelector('.message-start');\n      this.startButton = document.querySelector('.button');\n    }\n\n    initListeners() {\n      window.addEventListener('keyup', this.handleMove);\n\n      this.startButton.addEventListener('click', () => {\n        this.start();\n        audio.play();\n      });\n    }\n\n    initGame() {\n      for (let i = 0; i < this.tableSize; i++) {\n        const row = document.createElement('tr');\n\n        row.classList.add('field-row');\n        this.tbody.append(row);\n        this.tableField.append(this.tbody);\n\n        for (let j = 0; j < this.tableSize; j++) {\n          const cell = document.createElement('td');\n\n          cell.classList.add('field-cell');\n          row.append(cell);\n        }\n      }\n    }\n\n    start() {\n      this.score = 0;\n      this.gameOver = false;\n      this.hasWon = false;\n\n      this.matrix = new Array(this.tableSize)\n        .fill([])\n        .map(() => new Array(this.tableSize).fill(0));\n\n      this.messageLose.classList.add('hidden');\n      this.messageWin.classList.add('hidden');\n\n      if (this.startButton.classList.contains('start')) {\n        this.startButton.classList.remove('start');\n        this.startButton.classList.add('restart');\n        this.startButton.textContent = 'Restart';\n        this.messageStart.classList.add('hidden');\n      }\n\n      this.addNumber();\n      this.addNumber();\n      this.render();\n    }\n\n    getRandomNumber() {\n      return Math.random() >= 0.9 ? 4 : 2;\n    }\n\n    getRandomCell() {\n      const freeCells = this.getFreeCells();\n\n      return freeCells[Math.floor(Math.random() * freeCells.length)];\n    }\n\n    getFreeCells() {\n      return this.matrix.reduce((freeCells, row, rowIndex) => {\n        row.forEach(\n          (val, colIndex) => val === 0 && freeCells.push([rowIndex, colIndex])\n        );\n\n        return freeCells;\n      }, []);\n    }\n\n    addNumber() {\n      const [y, x] = this.getRandomCell();\n\n      this.matrix[y][x] = this.getRandomNumber();\n      this.render();\n    }\n\n    canMove() {\n      const freeCells = this.getFreeCells();\n\n      if (freeCells.length > 0) {\n        return true;\n      }\n\n      for (let i = 0; i < this.tableSize; i++) {\n        for (let j = 0; j < this.tableSize; j++) {\n          if (\n            (this.matrix[i][j + 1]\n              && this.matrix[i][j] === this.matrix[i][j + 1])\n            || (this.matrix[i + 1]\n              && this.matrix[i][j] === this.matrix[i + 1][j])\n          ) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    matrixShift() {\n      const emptyCells = new Array(this.tableSize).fill(0);\n\n      this.matrix = this.matrix.map((row) => {\n        return row\n          .filter((el) => el > 0)\n          .concat(emptyCells)\n          .slice(0, this.tableSize);\n      });\n    }\n\n    matrixRotate(degree) {\n      switch (degree) {\n        case 90:\n        case -270:\n          this.matrix = this.matrix.map((_, rowIndex) =>\n            this.matrix.map((row) => row[rowIndex]).reverse()\n          );\n          break;\n        case 180:\n        case -180:\n          this.matrix = this.matrix.map((row) => row.reverse()).reverse();\n          break;\n        case 270:\n        case -90:\n          this.matrix = this.matrix.map((_, rowIndex) =>\n            this.matrix.map((row) => [...row].reverse()[rowIndex])\n          );\n          break;\n        case 0:\n        case 360:\n        case -360:\n          return this.matrix;\n        default:\n          throw new Error('Degree must be not 0, 360, -360');\n      }\n    }\n\n    // eslint-disable-next-line no-shadow\n    handleMove(event) {\n      if (this.gameOver) {\n        return;\n      }\n\n      switch (event.key) {\n        case 'ArrowLeft':\n          this.merge();\n          this.render();\n          break;\n        case 'ArrowDown':\n          this.matrixRotate(90);\n          this.merge();\n          this.matrixRotate(-90);\n          this.render();\n          break;\n        case 'ArrowRight':\n          this.matrixRotate(180);\n          this.merge();\n          this.matrixRotate(-180);\n          this.render();\n          break;\n        case 'ArrowUp':\n          this.matrixRotate(270);\n          this.merge();\n          this.matrixRotate(-270);\n          this.render();\n          break;\n      }\n    }\n\n    hasMatrixChanged(matrixRef) {\n      return this.matrix.some((row, y) =>\n        row.some((val, x) => val !== matrixRef[y][x])\n      );\n    }\n\n    merge() {\n      const matrixRef = this.matrix.map((row) => row.slice());\n\n      for (let i = 0; i < this.tableSize; i++) {\n        for (let j = 0; j < this.tableSize - 1; j++) {\n          this.matrixShift();\n\n          if (this.matrix[i][j] === this.matrix[i][j + 1]) {\n            this.matrix[i][j] *= 2;\n            this.matrix[i][j + 1] = 0;\n            this.score += this.matrix[i][j];\n          }\n        }\n      }\n\n      if (this.hasMatrixChanged(matrixRef)) {\n        this.addNumber();\n      }\n    }\n\n    render() {\n      const { rows } = this.tableField;\n\n      this.numberElements.forEach((el) => {\n        el.textContent = '';\n        el.className = 'field-cell';\n      });\n      this.numberElements = [];\n\n      this.matrix.forEach((arr, rowIndex) =>\n        arr.forEach((val, cellIndex) => {\n          if (val) {\n            const field = rows[rowIndex].cells[cellIndex];\n\n            field.classList.add(`field-cell--${val}`);\n            this.numberElements.push(field);\n            this.gameScore.textContent = this.score;\n          }\n        })\n      );\n\n      if (\n        this.matrix.some((row) => row.some((el) => el === 2048))\n        && !this.hasWon\n      ) {\n        this.messageWin.classList.remove('hidden');\n        this.hasWon = true;\n\n        setTimeout(() => {\n          this.messageWin.classList.add('hidden');\n        }, 5000);\n      }\n\n      if (!this.canMove()) {\n        this.messageLose.classList.remove('hidden');\n        this.gameOver = true;\n      }\n    }\n  }\n\n  const game = new Game();\n\n  game.initGame();\n}\n"]}